#!/bin/bash
#############################################################################
# Copyright 2021 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

# define global variables
declare -a pid_signal_array
pid_signal_array[1]="SIGHUP"
pid_signal_array[2]="SIGINT"
pid_signal_array[3]="SIGQUIT"
pid_signal_array[4]="SIGKILL"
pid_signal_array[5]="SIGTRAP"
pid_signal_array[6]="SIGABRT"
pid_signal_array[7]="SIGBUS"
pid_signal_array[8]="SIGFPE"
pid_signal_array[9]="SIGKILL"
pid_signal_array[10]="SIGUSR1"
pid_signal_array[11]="SIGSEGV"
pid_signal_array[12]="SIGUSR2"
pid_signal_array[13]="SIGPIPE"
pid_signal_array[14]="SIGALRM"
pid_signal_array[15]="SIGTERM"
pid_signal_array[16]="SIGSTKFLT"
pid_signal_array[17]="SIGCHLD"
pid_signal_array[18]="SIGCONT"
pid_signal_array[19]="SIGSTOP"
pid_signal_array[20]="SIGTSTP"
pid_signal_array[21]="SIGTTIN"
pid_signal_array[22]="SIGTTOU"
pid_signal_array[23]="SIGURG"
pid_signal_array[24]="SIGXCPU"
pid_signal_array[25]="SIGXFSZ"
pid_signal_array[26]="SIGVTALRM"
pid_signal_array[27]="SIGPROF"
pid_signal_array[28]="SIGWINCH"
pid_signal_array[29]="SIGIO"
pid_signal_array[30]="SIGPWR"
pid_signal_array[31]="SIGSYS"
# not defined
#pid_signal_array[32]=""
#pid_signal_array[33]=""
pid_signal_array[34]="SIGRTMIN"
pid_signal_array[35]="SIGRTMIN+1"
pid_signal_array[36]="SIGRTMIN+2"
pid_signal_array[37]="SIGRTMIN+3"
pid_signal_array[38]="SIGRTMIN+4"
pid_signal_array[39]="SIGRTMIN+5"
pid_signal_array[40]="SIGRTMIN+6"
pid_signal_array[41]="SIGRTMIN+7"
pid_signal_array[42]="SIGRTMIN+8"
pid_signal_array[43]="SIGRTMIN+9"
pid_signal_array[44]="SIGRTMIN+10"
pid_signal_array[45]="SIGRTMIN+11"
pid_signal_array[46]="SIGRTMIN+12"
pid_signal_array[47]="SIGRTMIN+13"
pid_signal_array[48]="SIGRTMIN+14"
pid_signal_array[49]="SIGRTMIN+15"
pid_signal_array[50]="SIGRTMAX-14"
pid_signal_array[51]="SIGRTMAX-13"
pid_signal_array[52]="SIGRTMAX-12"
pid_signal_array[53]="SIGRTMAX-11"
pid_signal_array[54]="SIGRTMAX-10"
pid_signal_array[55]="SIGRTMAX-9"
pid_signal_array[56]="SIGRTMAX-8"
pid_signal_array[57]="SIGRTMAX-7"
pid_signal_array[58]="SIGRTMAX-6"
pid_signal_array[59]="SIGRTMAX-5"
pid_signal_array[60]="SIGRTMAX-4"
pid_signal_array[61]="SIGRTMAX-3"
pid_signal_array[62]="SIGRTMAX-2"
pid_signal_array[63]="SIGRTMAX-1"
pid_signal_array[64]="SIGRTMAX"
declare -A hex_value_array
hex_value_array["0"]="0"
hex_value_array["1"]="1"
hex_value_array["2"]="2"
hex_value_array["3"]="3"
hex_value_array["4"]="4"
hex_value_array["5"]="5"
hex_value_array["6"]="6"
hex_value_array["7"]="7"
hex_value_array["8"]="8"
hex_value_array["9"]="9"
hex_value_array["a"]="10"
hex_value_array["b"]="11"
hex_value_array["c"]="12"
hex_value_array["d"]="13"
hex_value_array["e"]="14"
hex_value_array["f"]="15"
# array index (decimal) points to corresponding binary value
declare -a bin_value_4bit_array=({0..1}{0..1}{0..1}{0..1})
declare -A pid_signal_name_array
pid_signal_name_array["SigPnd:"]="Signals pending (thread):"
pid_signal_name_array["ShdPnd:"]="Signals pending (process):"
pid_signal_name_array["SigBlk:"]="Signals blocked:"
pid_signal_name_array["SigIgn:"]="Signals ignored:"
pid_signal_name_array["SigCgt:"]="Signals caught:"
declare -a pid_signal_bin_value_4bit_array
declare -a pid_signal_bin_value_1bit_array
declare -a pid_signal_hex_value_delimited_array
underline_regex="[a-zA-Z:() ]"

main()
{
    declare -a pid_array=("${@}")
    for pid in "${pid_array[@]}"
    do
        local pid_directory_path="/proc/${pid}"

        if [[ ! -d "${pid_directory_path}" ]]
        then
            echo -e "\e[01;31mCould not find directory: '${pid_directory_path}'.\e[0m" >&2
            exit 1
        else
            local pid_status_file="status"
            local pid_file="${pid_directory_path}/${pid_status_file}"
            local pid_status=$(< "${pid_file}")
            local pid_name=$(/usr/bin/awk --field-separator="Name:\t" '/Name:/ { print $2 }' <<< "${pid_status}")
            local pid_uid=$(/usr/bin/awk --field-separator="Uid:\t" '/Uid:/ { gsub("\t", " ", $2); print $2 }' <<< "${pid_status}")
            local pid_gid=$(/usr/bin/awk --field-separator="Gid:\t" '/Gid:/ { gsub("\t", " ", $2); print $2 }' <<< "${pid_status}")
            local pid_queue=$(/usr/bin/awk --field-separator="SigQ:\t" '/SigQ:/ { print $2 }' <<< "${pid_status}")
            local hex_position
            local hex_value
            local binary_position
            local binary_value

            echo ""
            echo "PID: ${pid}"
            echo "Name: ${pid_name}"
            echo "UID: ${pid_uid}"
            echo "GID: ${pid_gid}"
            echo "Queued: ${pid_queue}"
            for pid_signal_name in "${!pid_signal_name_array[@]}"
            do
                local pid_signal_hex_value=$(/usr/bin/awk --assign="pid_signal_name=${pid_signal_name}" '$0 ~ pid_signal_name { print $2 }' <<< "${pid_status}")

                # refactor me: create function "hexToBin()"

                # split hexadecimal string per character
                # from: 0000000180004a03
                # to:   0 0 0 0 0 0 0 1 8 0 0 0 4 a 0 3
                unset pid_signal_hex_value_delimited_array
                for hex_position in $(eval echo "{0..${#pid_signal_hex_value}}")
                do
                    pid_signal_hex_value_delimited_array+=("${pid_signal_hex_value:${hex_position}:1}")
                done

                # convert hexadecimal to binary per character
                # from: 0    0    0    0    0    0    0    1    8    0    0    0    4    a    0    3
                # to:   0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 0100 1010 0000 0011
                unset pid_signal_bin_value_4bit_array
                for hex_value in "${pid_signal_hex_value_delimited_array[@]}"
                do
                    if [[ "${hex_value}" =~ ^[0-9]$ ]]
                    then
                        pid_signal_bin_value_4bit_array+="${bin_value_4bit_array[${hex_value}]} "
                    elif [[ "${hex_value}" =~ ^[a-fA-F]$ ]]
                    then
                        pid_signal_bin_value_4bit_array+="${bin_value_4bit_array[hex_value_array[${hex_value}]]} "
                    fi
                done

                # concatenate binary string and split string per character
                # from: 0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 0100 1010 0000 0011
                # to:   0000000000000000000000000000000110000000000000000100101000000011
                # to:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1
                local pid_signal_bin_value_concatenated="${pid_signal_bin_value_4bit_array[@]// /}"
                unset pid_signal_bin_value_1bit_array
                for binary_position in $(eval echo "{0..${#pid_signal_bin_value_concatenated}}")
                do
                    pid_signal_bin_value_1bit_array+=("${pid_signal_bin_value_concatenated:${binary_position}:1}")
                done

                # convert binary to signal name per character
                # from: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1
                # to:   Signal <signal_number>: <signal_name>
                local binary_array_index="${#pid_signal_bin_value_concatenated}"
                echo ""
                echo "${pid_signal_name_array[${pid_signal_name}]}"
                echo "${pid_signal_name_array[${pid_signal_name}]//${underline_regex}/-}"
                for binary_value in "${pid_signal_bin_value_1bit_array[@]}"
                do
                    # signal "32" and "33" are undefined
                    if [[ "${binary_array_index}" == "32" || "${binary_array_index}" == "33" ]]
                    then
                        (( binary_array_index-- ))
                        continue
                    elif [[ "${binary_value}" == "0" ]]
                    then
                        (( binary_array_index-- ))
                        continue
                    elif [[ "${binary_value}" == "1" ]]
                    then
                        echo "Signal ${binary_array_index}: ${pid_signal_array[${binary_array_index}]}"
                    fi

                    (( binary_array_index-- ))
                done

                # output results, if there is any signal. also output results, if signal "32" and "33" are set to "1", which actually does not make any sense.
                if [[ "${pid_signal_bin_value_concatenated}" == *"1"* ]]
                then
                    echo -e "Hexadecimal: ${pid_signal_hex_value_delimited_array[@]}\nBinary: ${pid_signal_bin_value_4bit_array[@]}" | /usr/bin/column -t
                else
                    echo "No signals found."
                fi
            done
        fi
        echo -e "\n############################################################################################################"
    done
}

main "${@}"
